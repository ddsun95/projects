Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_PROTOTYPE
   TOK_FUNCTION
   TOK_DECLID
   TOK_VARDECL
   TOK_PARAMLIST
   TOK_NEWSTRING
   TOK_INDEX
   TOK_STMT
   TOK_RETURNVOID


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: structdef_ '}'

    9 structdef_: TOK_STRUCT TOK_IDENT '{'
   10           | structdef_ fielddecl ';'

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT
   12          | basetype TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_BOOL
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_IDENT

   19 function: identdecl '(' ')' block
   20         | identdecl fnargs ')' block

   21 fnargs: fnargs ',' identdecl
   22       | '(' identdecl

   23 identdecl: basetype TOK_ARRAY TOK_IDENT
   24          | basetype TOK_IDENT

   25 block: block_ '}'
   26      | ';'

   27 block_: block_ statement
   28       | '{'

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 vardecl: identdecl '=' expr ';'

   36 while: TOK_WHILE '(' expr ')' statement

   37 ifelse: TOK_IF '(' expr ')' statement
   38       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   39 return: TOK_RETURN expr ';'
   40       | TOK_RETURN ';'

   41 expr: binop
   42     | unop
   43     | allocator
   44     | call
   45     | '(' expr ')'
   46     | variable
   47     | constant

   48 binop: expr '+' expr
   49      | expr '-' expr
   50      | expr '*' expr
   51      | expr '/' expr
   52      | expr '%' expr
   53      | expr '=' expr
   54      | expr TOK_EQ expr
   55      | expr TOK_NE expr
   56      | expr TOK_LT expr
   57      | expr TOK_LE expr
   58      | expr TOK_GT expr
   59      | expr TOK_GE expr

   60 unop: '+' expr
   61     | '-' expr
   62     | '!' expr
   63     | TOK_ORD expr
   64     | TOK_CHR expr

   65 allocator: TOK_NEW TOK_IDENT '(' ')'
   66          | TOK_NEW TOK_STRING '(' expr ')'
   67          | TOK_NEW basetype '[' expr ']'

   68 call: callargs ')'
   69     | TOK_IDENT '(' ')'

   70 callargs: TOK_IDENT '(' expr
   71         | callargs ',' expr

   72 variable: TOK_IDENT
   73         | expr '[' expr ']'
   74         | expr '.' TOK_IDENT

   75 constant: TOK_INTCON
   76         | TOK_CHARCON
   77         | TOK_STRINGCON
   78         | TOK_FALSE
   79         | TOK_TRUE
   80         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 62
'%' (37) 52
'(' (40) 19 22 36 37 38 45 65 66 69 70
')' (41) 19 20 36 37 38 45 65 66 68 69
'*' (42) 50
'+' (43) 48 60
',' (44) 21 71
'-' (45) 49 61
'.' (46) 74
'/' (47) 51
';' (59) 6 10 26 34 35 39 40
'=' (61) 35 53
'[' (91) 67 73
']' (93) 67 73
'{' (123) 9 28
'}' (125) 5 8 25
error (256) 5 6
TOK_VOID (258) 13
TOK_BOOL (259) 14
TOK_CHAR (260) 15
TOK_INT (261) 16
TOK_STRING (262) 17 66
TOK_IF (263) 37 38
TOK_ELSE (264) 38
TOK_WHILE (265) 36
TOK_RETURN (266) 39 40
TOK_STRUCT (267) 9
TOK_FALSE (268) 78
TOK_TRUE (269) 79
TOK_NULL (270) 80
TOK_NEW (271) 65 66 67
TOK_ARRAY (272) 11 23
TOK_EQ (273) 54
TOK_NE (274) 55
TOK_LT (275) 56
TOK_LE (276) 57
TOK_GT (277) 58
TOK_GE (278) 59
TOK_IDENT (279) 9 11 12 18 23 24 65 69 70 72 74
TOK_INTCON (280) 75
TOK_CHARCON (281) 76
TOK_STRINGCON (282) 77
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 63
TOK_CHR (293) 64
TOK_ROOT (294)
TOK_PROTOTYPE (295)
TOK_FUNCTION (296)
TOK_DECLID (297)
TOK_VARDECL (298)
TOK_PARAMLIST (299)
TOK_NEWSTRING (300)
TOK_INDEX (301)
TOK_STMT (302)
TOK_RETURNVOID (303)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
start (66)
    on left: 1, on right: 0
program (67)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (68)
    on left: 8, on right: 2
structdef_ (69)
    on left: 9 10, on right: 8 10
fielddecl (70)
    on left: 11 12, on right: 10
basetype (71)
    on left: 13 14 15 16 17 18, on right: 11 12 23 24 67
function (72)
    on left: 19 20, on right: 3
fnargs (73)
    on left: 21 22, on right: 20 21
identdecl (74)
    on left: 23 24, on right: 19 20 21 22 35
block (75)
    on left: 25 26, on right: 19 20 29
block_ (76)
    on left: 27 28, on right: 25 27
statement (77)
    on left: 29 30 31 32 33 34, on right: 4 27 36 37 38
vardecl (78)
    on left: 35, on right: 30
while (79)
    on left: 36, on right: 31
ifelse (80)
    on left: 37 38, on right: 32
return (81)
    on left: 39 40, on right: 33
expr (82)
    on left: 41 42 43 44 45 46 47, on right: 34 35 36 37 38 39 45 48
    49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 66 67 70 71 73
    74
binop (83)
    on left: 48 49 50 51 52 53 54 55 56 57 58 59, on right: 41
unop (84)
    on left: 60 61 62 63 64, on right: 42
allocator (85)
    on left: 65 66 67, on right: 43
call (86)
    on left: 68 69, on right: 44
callargs (87)
    on left: 70 71, on right: 68 71
variable (88)
    on left: 72 73 74, on right: 46
constant (89)
    on left: 75 76 77 78 79 80, on right: 47


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef   go to state 30
    structdef_  go to state 31
    basetype    go to state 32
    function    go to state 33
    identdecl   go to state 34
    block       go to state 35
    block_      go to state 36
    statement   go to state 37
    vardecl     go to state 38
    while       go to state 39
    ifelse      go to state 40
    return      go to state 41
    expr        go to state 42
    binop       go to state 43
    unop        go to state 44
    allocator   go to state 45
    call        go to state 46
    callargs    go to state 47
    variable    go to state 48
    constant    go to state 49


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 50
    ';'  shift, and go to state 51


state 5

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


state 6

   14 basetype: TOK_BOOL .

    $default  reduce using rule 14 (basetype)


state 7

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


state 8

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


state 9

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


state 10

   37 ifelse: TOK_IF . '(' expr ')' statement
   38       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 52


state 11

   36 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 53


state 12

   39 return: TOK_RETURN . expr ';'
   40       | TOK_RETURN . ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 55

    expr       go to state 56
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 13

    9 structdef_: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 57


state 14

   78 constant: TOK_FALSE .

    $default  reduce using rule 78 (constant)


state 15

   79 constant: TOK_TRUE .

    $default  reduce using rule 79 (constant)


state 16

   80 constant: TOK_NULL .

    $default  reduce using rule 80 (constant)


state 17

   65 allocator: TOK_NEW . TOK_IDENT '(' ')'
   66          | TOK_NEW . TOK_STRING '(' expr ')'
   67          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 58
    TOK_IDENT   shift, and go to state 59

    basetype  go to state 60


state 18

   18 basetype: TOK_IDENT .
   69 call: TOK_IDENT . '(' ')'
   70 callargs: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 61

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 72 (variable)


state 19

   75 constant: TOK_INTCON .

    $default  reduce using rule 75 (constant)


state 20

   76 constant: TOK_CHARCON .

    $default  reduce using rule 76 (constant)


state 21

   77 constant: TOK_STRINGCON .

    $default  reduce using rule 77 (constant)


state 22

   63 unop: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 62
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 23

   64 unop: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 63
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 24

   60 unop: '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 64
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 25

   61 unop: '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 65
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 26

   62 unop: '!' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 66
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 27

   45 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 67
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 28

   26 block: ';' .

    $default  reduce using rule 26 (block)


state 29

   28 block_: '{' .

    $default  reduce using rule 28 (block_)


state 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 31

    8 structdef: structdef_ . '}'
   10 structdef_: structdef_ . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 68
    '}'         shift, and go to state 69

    fielddecl  go to state 70
    basetype   go to state 71


state 32

   23 identdecl: basetype . TOK_ARRAY TOK_IDENT
   24          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 72
    TOK_IDENT  shift, and go to state 73


state 33

    3 program: program function .

    $default  reduce using rule 3 (program)


state 34

   19 function: identdecl . '(' ')' block
   20         | identdecl . fnargs ')' block
   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 74
    '('  shift, and go to state 75

    fnargs  go to state 76


state 35

   29 statement: block .

    $default  reduce using rule 29 (statement)


state 36

   25 block: block_ . '}'
   27 block_: block_ . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 77
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 32
    identdecl  go to state 78
    block      go to state 35
    block_     go to state 36
    statement  go to state 79
    vardecl    go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 37

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 38

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


state 39

   31 statement: while .

    $default  reduce using rule 31 (statement)


state 40

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


state 41

   33 statement: return .

    $default  reduce using rule 33 (statement)


state 42

   34 statement: expr . ';'
   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ';'     shift, and go to state 94


state 43

   41 expr: binop .

    $default  reduce using rule 41 (expr)


state 44

   42 expr: unop .

    $default  reduce using rule 42 (expr)


state 45

   43 expr: allocator .

    $default  reduce using rule 43 (expr)


state 46

   44 expr: call .

    $default  reduce using rule 44 (expr)


state 47

   68 call: callargs . ')'
   71 callargs: callargs . ',' expr

    ')'  shift, and go to state 95
    ','  shift, and go to state 96


state 48

   46 expr: variable .

    $default  reduce using rule 46 (expr)


state 49

   47 expr: constant .

    $default  reduce using rule 47 (expr)


state 50

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 51

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 52

   37 ifelse: TOK_IF '(' . expr ')' statement
   38       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 97
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 53

   36 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 98
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 54

   69 call: TOK_IDENT . '(' ')'
   70 callargs: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 61

    $default  reduce using rule 72 (variable)


state 55

   40 return: TOK_RETURN ';' .

    $default  reduce using rule 40 (return)


state 56

   39 return: TOK_RETURN expr . ';'
   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ';'     shift, and go to state 99


state 57

    9 structdef_: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 100


state 58

   17 basetype: TOK_STRING .
   66 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 101

    $default  reduce using rule 17 (basetype)


state 59

   18 basetype: TOK_IDENT .
   65 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 102

    $default  reduce using rule 18 (basetype)


state 60

   67 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 103


state 61

   69 call: TOK_IDENT '(' . ')'
   70 callargs: TOK_IDENT '(' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ')'            shift, and go to state 104

    expr       go to state 105
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 62

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   63 unop: TOK_ORD expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 63 (unop)


state 63

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   64 unop: TOK_CHR expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 64 (unop)


state 64

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   60 unop: '+' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 60 (unop)


state 65

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   61 unop: '-' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 61 (unop)


state 66

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   62 unop: '!' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 62 (unop)


state 67

   45 expr: '(' expr . ')'
   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ')'     shift, and go to state 106


state 68

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


state 69

    8 structdef: structdef_ '}' .

    $default  reduce using rule 8 (structdef)


state 70

   10 structdef_: structdef_ fielddecl . ';'

    ';'  shift, and go to state 107


state 71

   11 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   12          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 108
    TOK_IDENT  shift, and go to state 109


state 72

   23 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 110


state 73

   24 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


state 74

   35 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 111
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 75

   19 function: identdecl '(' . ')' block
   22 fnargs: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 68
    ')'         shift, and go to state 112

    basetype   go to state 32
    identdecl  go to state 113


state 76

   20 function: identdecl fnargs . ')' block
   21 fnargs: fnargs . ',' identdecl

    ')'  shift, and go to state 114
    ','  shift, and go to state 115


state 77

   25 block: block_ '}' .

    $default  reduce using rule 25 (block)


state 78

   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 74


state 79

   27 block_: block_ statement .

    $default  reduce using rule 27 (block_)


state 80

   54 binop: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 116
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 81

   55 binop: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 117
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 82

   56 binop: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 118
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 83

   57 binop: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 119
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 84

   58 binop: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 120
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 85

   59 binop: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 121
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 86

   53 binop: expr '=' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 122
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 87

   48 binop: expr '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 123
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 88

   49 binop: expr '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 124
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 89

   50 binop: expr '*' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 125
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 90

   51 binop: expr '/' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 126
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 91

   52 binop: expr '%' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 127
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 92

   73 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 128
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 93

   74 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 129


state 94

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


state 95

   68 call: callargs ')' .

    $default  reduce using rule 68 (call)


state 96

   71 callargs: callargs ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 130
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 97

   37 ifelse: TOK_IF '(' expr . ')' statement
   38       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ')'     shift, and go to state 131


state 98

   36 while: TOK_WHILE '(' expr . ')' statement
   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ')'     shift, and go to state 132


state 99

   39 return: TOK_RETURN expr ';' .

    $default  reduce using rule 39 (return)


state 100

    9 structdef_: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 9 (structdef_)


state 101

   66 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 133
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 102

   65 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 134


state 103

   67 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 135
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 104

   69 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 69 (call)


state 105

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   70 callargs: TOK_IDENT '(' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93

    $default  reduce using rule 70 (callargs)


state 106

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


state 107

   10 structdef_: structdef_ fielddecl ';' .

    $default  reduce using rule 10 (structdef_)


state 108

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 136


state 109

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


state 110

   23 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


state 111

   35 vardecl: identdecl '=' expr . ';'
   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ';'     shift, and go to state 137


state 112

   19 function: identdecl '(' ')' . block

    ';'  shift, and go to state 28
    '{'  shift, and go to state 29

    block   go to state 138
    block_  go to state 36


state 113

   22 fnargs: '(' identdecl .

    $default  reduce using rule 22 (fnargs)


state 114

   20 function: identdecl fnargs ')' . block

    ';'  shift, and go to state 28
    '{'  shift, and go to state 29

    block   go to state 139
    block_  go to state 36


state 115

   21 fnargs: fnargs ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 68

    basetype   go to state 32
    identdecl  go to state 140


state 116

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   54      | expr TOK_EQ expr .
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 54 (binop)


state 117

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   55      | expr TOK_NE expr .
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 55 (binop)


state 118

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   56      | expr TOK_LT expr .
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 56 (binop)


state 119

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   57      | expr TOK_LE expr .
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 57 (binop)


state 120

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   58      | expr TOK_GT expr .
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 58 (binop)


state 121

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   59      | expr TOK_GE expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 59 (binop)


state 122

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   53      | expr '=' expr .
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93

    $default  reduce using rule 53 (binop)


state 123

   48 binop: expr . '+' expr
   48      | expr '+' expr .
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 48 (binop)


state 124

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   49      | expr '-' expr .
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 49 (binop)


state 125

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   50      | expr '*' expr .
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 50 (binop)


state 126

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   51      | expr '/' expr .
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 51 (binop)


state 127

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   52      | expr '%' expr .
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 52 (binop)


state 128

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   73 variable: expr . '[' expr ']'
   73         | expr '[' expr . ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ']'     shift, and go to state 141


state 129

   74 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 74 (variable)


state 130

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   71 callargs: callargs ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93

    $default  reduce using rule 71 (callargs)


state 131

   37 ifelse: TOK_IF '(' expr ')' . statement
   38       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 32
    identdecl  go to state 78
    block      go to state 35
    block_     go to state 36
    statement  go to state 142
    vardecl    go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 132

   36 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 32
    identdecl  go to state 78
    block      go to state 35
    block_     go to state 36
    statement  go to state 143
    vardecl    go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 133

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   66 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ')'     shift, and go to state 144


state 134

   65 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 65 (allocator)


state 135

   48 binop: expr . '+' expr
   49      | expr . '-' expr
   50      | expr . '*' expr
   51      | expr . '/' expr
   52      | expr . '%' expr
   53      | expr . '=' expr
   54      | expr . TOK_EQ expr
   55      | expr . TOK_NE expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_LE expr
   58      | expr . TOK_GT expr
   59      | expr . TOK_GE expr
   67 allocator: TOK_NEW basetype '[' expr . ']'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ']'     shift, and go to state 145


state 136

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


state 137

   35 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 35 (vardecl)


state 138

   19 function: identdecl '(' ')' block .

    $default  reduce using rule 19 (function)


state 139

   20 function: identdecl fnargs ')' block .

    $default  reduce using rule 20 (function)


state 140

   21 fnargs: fnargs ',' identdecl .

    $default  reduce using rule 21 (fnargs)


state 141

   73 variable: expr '[' expr ']' .

    $default  reduce using rule 73 (variable)


state 142

   37 ifelse: TOK_IF '(' expr ')' statement .
   38       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 146

    $default  reduce using rule 37 (ifelse)


state 143

   36 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 36 (while)


state 144

   66 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 66 (allocator)


state 145

   67 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 67 (allocator)


state 146

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 32
    identdecl  go to state 78
    block      go to state 35
    block_     go to state 36
    statement  go to state 147
    vardecl    go to state 38
    while      go to state 39
    ifelse     go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    call       go to state 46
    callargs   go to state 47
    variable   go to state 48
    constant   go to state 49


state 147

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 38 (ifelse)
